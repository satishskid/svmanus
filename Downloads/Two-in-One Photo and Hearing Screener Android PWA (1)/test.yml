name: Test & Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: health_screener_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Setup environment variables
      run: |
        cat > .env.test << EOF
        DATABASE_URL=mysql://root:root@localhost:3306/health_screener_test
        JWT_SECRET=test-secret-key
        OAUTH_SERVER_URL=https://api.manus.im
        VITE_OAUTH_PORTAL_URL=https://portal.manus.im
        VITE_APP_ID=test-app-id
        VITE_APP_TITLE=Health Screener
        BUILT_IN_FORGE_API_URL=https://api.manus.im
        BUILT_IN_FORGE_API_KEY=test-key
        NODE_ENV=test
        EOF
    
    - name: Run linting
      run: pnpm lint
      continue-on-error: true
    
    - name: Run type checking
      run: pnpm type-check
      continue-on-error: true
    
    - name: Run unit tests
      run: pnpm test
      continue-on-error: true
    
    - name: Build application
      run: pnpm build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        files: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
      continue-on-error: true
